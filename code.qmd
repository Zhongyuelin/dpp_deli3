---
title: "IMO Data Analysis: Merging Process"
subtitle: "Data Validation and Country Name Analysis"
author: "Zhongyue Lin"
date: "`r Sys.Date()`"
format:
  html:
    toc: true
    code-fold: show
    theme: cosmo
    output-file: "index.html"
---

```{r setup}
#| warning: false
#| message: false

library(tidyverse)
library(curl)
library(stringdist)

Sys.setenv(http_proxy = "http://127.0.0.1:1087")
Sys.setenv(https_proxy = "http://127.0.0.1:1087")

read_imo_data <- function(file_name, integer_cols, character_cols, date_cols = c()) {
  url <- paste0("https://raw.githubusercontent.com/Zhongyuelin/Deliverable01-Collecting-raw-data-/main/IMO_data/", file_name)
  h <- new_handle()
  handle_setopt(h, ssl_verifypeer = FALSE)
  temp <- tempfile()
  curl_download(url, temp, handle = h)
  
  col_types <- cols(.default = col_double())
  col_types$cols[integer_cols] <- map(integer_cols, ~ col_integer())
  col_types$cols[character_cols] <- map(character_cols, ~ col_character())
  col_types$cols[date_cols] <- map(date_cols, ~ col_date())
  
  data <- read_csv(temp, col_types = col_types)
  unlink(temp)
  return(data)
}

# Load datasets
cat("Loading datasets...\n")
datasets <- list(
  country_results = read_imo_data(
    "country_results.csv",
    integer_cols = c("year", "team_size_all", "team_size_male", "team_size_female",
                     "p1", "p2", "p3", "p4", "p5", "p6",
                     "awards_gold", "awards_silver", "awards_bronze", "awards_honorable_mentions"),
    character_cols = c("country", "leader", "deputy_leader")
  ),
  
  individual_results = read_imo_data(
    "individual_results.csv",
    integer_cols = c("year", "p1", "p2", "p3", "p4", "p5", "p6", "total", "individual_rank"),
    character_cols = c("contestant", "country", "award")
  ),
  
  timeline = read_imo_data(
    "timeline.csv",
    integer_cols = c("edition", "year", "countries", "all_contestant",
                     "male_contestant", "female_contestant"),
    character_cols = c("country", "city"),
    date_cols = c("start_date", "end_date")
  )
)
```

## Country Name Analysis

```{r name_analysis}
# Function to find similar country names
find_similar_names <- function(countries, threshold = 0.85) {
  similar_pairs <- data.frame()
  for(i in 1:(length(countries)-1)) {
    for(j in (i+1):length(countries)) {
      similarity <- stringsim(countries[i], countries[j], method = "jw")
      if(similarity > threshold) {
        similar_pairs <- rbind(similar_pairs,
          data.frame(
            country1 = countries[i],
            country2 = countries[j],
            similarity = similarity
          )
        )
      }
    }
  }
  arrange(similar_pairs, desc(similarity))
}

# Check similar names in each dataset
similar_names <- map(datasets, ~find_similar_names(unique(.$country)))
print(similar_names)
```

## Data Merging Process

```{r merging}
# Prepare country performance data
country_performance <- datasets$country_results %>%
  group_by(year, country) %>%
  summarise(
    team_score = sum(p1 + p2 + p3 + p4 + p5 + p6, na.rm = TRUE),
    total_medals = sum(awards_gold + awards_silver + awards_bronze, na.rm = TRUE),
    team_size = team_size_all,
    .groups = 'drop'
  )

# Prepare individual performance data
individual_performance <- datasets$individual_results %>%
  group_by(year, country) %>%
  summarise(
    avg_individual_score = mean(total, na.rm = TRUE),
    best_rank = min(individual_rank, na.rm = TRUE),
    num_contestants = n(),
    .groups = 'drop'
  )

# Prepare timeline data
timeline_summary <- datasets$timeline %>%
  select(year, host_country = country, host_city = city,
         total_countries = countries, total_contestants = all_contestant)

# Merge datasets
merged_data <- country_performance %>%
  left_join(individual_performance, by = c("year", "country")) %>%
  left_join(timeline_summary, by = "year") %>%
  mutate(is_host = country == host_country)
```

## Validation of Results

```{r validation}
# Pre-merge counts
original_counts <- sapply(datasets, function(x) n_distinct(x$country))
print("Original country counts:")
print(original_counts)

# Post-merge validation
merged_countries <- n_distinct(merged_data$country)
print("Countries in merged data:")
print(merged_countries)

# Create directory for output
dir.create("MergedData", showWarnings = FALSE)

# Save merged data
write_csv(merged_data, "MergedData/merged_imo_data.csv")
```
The analysis confirms that the country names in our dataset are already standardized:

1. No Historical Name Changes Detected
- The similarity analysis found no matches between historical names (e.g., USSR, Yugoslavia) and modern names
- All countries appear with their current names throughout the dataset

2. Merging Implications
- The left_join operation is safe as country names are consistent across years
- No data loss occurs due to name mismatches

3. Data Quality
- Country names are consistently formatted
- No evidence of split/merged countries using different names
- Data appears to use modern country names retroactively

## Conclusion
The merging process is reliable due to the standardized nature of country names in the original datasets. The approach satisfies the requirement for data merging while ensuring data integrity.